// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/biryanim/leadgenmarket_tz/internal/service.EncodeService -o encode_service_minimock.go -n EncodeServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/biryanim/leadgenmarket_tz/internal/model"
	"github.com/gojuno/minimock/v3"
)

// EncodeServiceMock implements mm_service.EncodeService
type EncodeServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcEncodeText          func(ctx context.Context, text *model.NormalStr) (ep1 *model.EncodedText, err error)
	funcEncodeTextOrigin    string
	inspectFuncEncodeText   func(ctx context.Context, text *model.NormalStr)
	afterEncodeTextCounter  uint64
	beforeEncodeTextCounter uint64
	EncodeTextMock          mEncodeServiceMockEncodeText
}

// NewEncodeServiceMock returns a mock for mm_service.EncodeService
func NewEncodeServiceMock(t minimock.Tester) *EncodeServiceMock {
	m := &EncodeServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.EncodeTextMock = mEncodeServiceMockEncodeText{mock: m}
	m.EncodeTextMock.callArgs = []*EncodeServiceMockEncodeTextParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mEncodeServiceMockEncodeText struct {
	optional           bool
	mock               *EncodeServiceMock
	defaultExpectation *EncodeServiceMockEncodeTextExpectation
	expectations       []*EncodeServiceMockEncodeTextExpectation

	callArgs []*EncodeServiceMockEncodeTextParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// EncodeServiceMockEncodeTextExpectation specifies expectation struct of the EncodeService.EncodeText
type EncodeServiceMockEncodeTextExpectation struct {
	mock               *EncodeServiceMock
	params             *EncodeServiceMockEncodeTextParams
	paramPtrs          *EncodeServiceMockEncodeTextParamPtrs
	expectationOrigins EncodeServiceMockEncodeTextExpectationOrigins
	results            *EncodeServiceMockEncodeTextResults
	returnOrigin       string
	Counter            uint64
}

// EncodeServiceMockEncodeTextParams contains parameters of the EncodeService.EncodeText
type EncodeServiceMockEncodeTextParams struct {
	ctx  context.Context
	text *model.NormalStr
}

// EncodeServiceMockEncodeTextParamPtrs contains pointers to parameters of the EncodeService.EncodeText
type EncodeServiceMockEncodeTextParamPtrs struct {
	ctx  *context.Context
	text **model.NormalStr
}

// EncodeServiceMockEncodeTextResults contains results of the EncodeService.EncodeText
type EncodeServiceMockEncodeTextResults struct {
	ep1 *model.EncodedText
	err error
}

// EncodeServiceMockEncodeTextOrigins contains origins of expectations of the EncodeService.EncodeText
type EncodeServiceMockEncodeTextExpectationOrigins struct {
	origin     string
	originCtx  string
	originText string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmEncodeText *mEncodeServiceMockEncodeText) Optional() *mEncodeServiceMockEncodeText {
	mmEncodeText.optional = true
	return mmEncodeText
}

// Expect sets up expected params for EncodeService.EncodeText
func (mmEncodeText *mEncodeServiceMockEncodeText) Expect(ctx context.Context, text *model.NormalStr) *mEncodeServiceMockEncodeText {
	if mmEncodeText.mock.funcEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Set")
	}

	if mmEncodeText.defaultExpectation == nil {
		mmEncodeText.defaultExpectation = &EncodeServiceMockEncodeTextExpectation{}
	}

	if mmEncodeText.defaultExpectation.paramPtrs != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by ExpectParams functions")
	}

	mmEncodeText.defaultExpectation.params = &EncodeServiceMockEncodeTextParams{ctx, text}
	mmEncodeText.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmEncodeText.expectations {
		if minimock.Equal(e.params, mmEncodeText.defaultExpectation.params) {
			mmEncodeText.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmEncodeText.defaultExpectation.params)
		}
	}

	return mmEncodeText
}

// ExpectCtxParam1 sets up expected param ctx for EncodeService.EncodeText
func (mmEncodeText *mEncodeServiceMockEncodeText) ExpectCtxParam1(ctx context.Context) *mEncodeServiceMockEncodeText {
	if mmEncodeText.mock.funcEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Set")
	}

	if mmEncodeText.defaultExpectation == nil {
		mmEncodeText.defaultExpectation = &EncodeServiceMockEncodeTextExpectation{}
	}

	if mmEncodeText.defaultExpectation.params != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Expect")
	}

	if mmEncodeText.defaultExpectation.paramPtrs == nil {
		mmEncodeText.defaultExpectation.paramPtrs = &EncodeServiceMockEncodeTextParamPtrs{}
	}
	mmEncodeText.defaultExpectation.paramPtrs.ctx = &ctx
	mmEncodeText.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmEncodeText
}

// ExpectTextParam2 sets up expected param text for EncodeService.EncodeText
func (mmEncodeText *mEncodeServiceMockEncodeText) ExpectTextParam2(text *model.NormalStr) *mEncodeServiceMockEncodeText {
	if mmEncodeText.mock.funcEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Set")
	}

	if mmEncodeText.defaultExpectation == nil {
		mmEncodeText.defaultExpectation = &EncodeServiceMockEncodeTextExpectation{}
	}

	if mmEncodeText.defaultExpectation.params != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Expect")
	}

	if mmEncodeText.defaultExpectation.paramPtrs == nil {
		mmEncodeText.defaultExpectation.paramPtrs = &EncodeServiceMockEncodeTextParamPtrs{}
	}
	mmEncodeText.defaultExpectation.paramPtrs.text = &text
	mmEncodeText.defaultExpectation.expectationOrigins.originText = minimock.CallerInfo(1)

	return mmEncodeText
}

// Inspect accepts an inspector function that has same arguments as the EncodeService.EncodeText
func (mmEncodeText *mEncodeServiceMockEncodeText) Inspect(f func(ctx context.Context, text *model.NormalStr)) *mEncodeServiceMockEncodeText {
	if mmEncodeText.mock.inspectFuncEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("Inspect function is already set for EncodeServiceMock.EncodeText")
	}

	mmEncodeText.mock.inspectFuncEncodeText = f

	return mmEncodeText
}

// Return sets up results that will be returned by EncodeService.EncodeText
func (mmEncodeText *mEncodeServiceMockEncodeText) Return(ep1 *model.EncodedText, err error) *EncodeServiceMock {
	if mmEncodeText.mock.funcEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Set")
	}

	if mmEncodeText.defaultExpectation == nil {
		mmEncodeText.defaultExpectation = &EncodeServiceMockEncodeTextExpectation{mock: mmEncodeText.mock}
	}
	mmEncodeText.defaultExpectation.results = &EncodeServiceMockEncodeTextResults{ep1, err}
	mmEncodeText.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmEncodeText.mock
}

// Set uses given function f to mock the EncodeService.EncodeText method
func (mmEncodeText *mEncodeServiceMockEncodeText) Set(f func(ctx context.Context, text *model.NormalStr) (ep1 *model.EncodedText, err error)) *EncodeServiceMock {
	if mmEncodeText.defaultExpectation != nil {
		mmEncodeText.mock.t.Fatalf("Default expectation is already set for the EncodeService.EncodeText method")
	}

	if len(mmEncodeText.expectations) > 0 {
		mmEncodeText.mock.t.Fatalf("Some expectations are already set for the EncodeService.EncodeText method")
	}

	mmEncodeText.mock.funcEncodeText = f
	mmEncodeText.mock.funcEncodeTextOrigin = minimock.CallerInfo(1)
	return mmEncodeText.mock
}

// When sets expectation for the EncodeService.EncodeText which will trigger the result defined by the following
// Then helper
func (mmEncodeText *mEncodeServiceMockEncodeText) When(ctx context.Context, text *model.NormalStr) *EncodeServiceMockEncodeTextExpectation {
	if mmEncodeText.mock.funcEncodeText != nil {
		mmEncodeText.mock.t.Fatalf("EncodeServiceMock.EncodeText mock is already set by Set")
	}

	expectation := &EncodeServiceMockEncodeTextExpectation{
		mock:               mmEncodeText.mock,
		params:             &EncodeServiceMockEncodeTextParams{ctx, text},
		expectationOrigins: EncodeServiceMockEncodeTextExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmEncodeText.expectations = append(mmEncodeText.expectations, expectation)
	return expectation
}

// Then sets up EncodeService.EncodeText return parameters for the expectation previously defined by the When method
func (e *EncodeServiceMockEncodeTextExpectation) Then(ep1 *model.EncodedText, err error) *EncodeServiceMock {
	e.results = &EncodeServiceMockEncodeTextResults{ep1, err}
	return e.mock
}

// Times sets number of times EncodeService.EncodeText should be invoked
func (mmEncodeText *mEncodeServiceMockEncodeText) Times(n uint64) *mEncodeServiceMockEncodeText {
	if n == 0 {
		mmEncodeText.mock.t.Fatalf("Times of EncodeServiceMock.EncodeText mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmEncodeText.expectedInvocations, n)
	mmEncodeText.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmEncodeText
}

func (mmEncodeText *mEncodeServiceMockEncodeText) invocationsDone() bool {
	if len(mmEncodeText.expectations) == 0 && mmEncodeText.defaultExpectation == nil && mmEncodeText.mock.funcEncodeText == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmEncodeText.mock.afterEncodeTextCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmEncodeText.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// EncodeText implements mm_service.EncodeService
func (mmEncodeText *EncodeServiceMock) EncodeText(ctx context.Context, text *model.NormalStr) (ep1 *model.EncodedText, err error) {
	mm_atomic.AddUint64(&mmEncodeText.beforeEncodeTextCounter, 1)
	defer mm_atomic.AddUint64(&mmEncodeText.afterEncodeTextCounter, 1)

	mmEncodeText.t.Helper()

	if mmEncodeText.inspectFuncEncodeText != nil {
		mmEncodeText.inspectFuncEncodeText(ctx, text)
	}

	mm_params := EncodeServiceMockEncodeTextParams{ctx, text}

	// Record call args
	mmEncodeText.EncodeTextMock.mutex.Lock()
	mmEncodeText.EncodeTextMock.callArgs = append(mmEncodeText.EncodeTextMock.callArgs, &mm_params)
	mmEncodeText.EncodeTextMock.mutex.Unlock()

	for _, e := range mmEncodeText.EncodeTextMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmEncodeText.EncodeTextMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmEncodeText.EncodeTextMock.defaultExpectation.Counter, 1)
		mm_want := mmEncodeText.EncodeTextMock.defaultExpectation.params
		mm_want_ptrs := mmEncodeText.EncodeTextMock.defaultExpectation.paramPtrs

		mm_got := EncodeServiceMockEncodeTextParams{ctx, text}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmEncodeText.t.Errorf("EncodeServiceMock.EncodeText got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEncodeText.EncodeTextMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.text != nil && !minimock.Equal(*mm_want_ptrs.text, mm_got.text) {
				mmEncodeText.t.Errorf("EncodeServiceMock.EncodeText got unexpected parameter text, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmEncodeText.EncodeTextMock.defaultExpectation.expectationOrigins.originText, *mm_want_ptrs.text, mm_got.text, minimock.Diff(*mm_want_ptrs.text, mm_got.text))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmEncodeText.t.Errorf("EncodeServiceMock.EncodeText got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmEncodeText.EncodeTextMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmEncodeText.EncodeTextMock.defaultExpectation.results
		if mm_results == nil {
			mmEncodeText.t.Fatal("No results are set for the EncodeServiceMock.EncodeText")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmEncodeText.funcEncodeText != nil {
		return mmEncodeText.funcEncodeText(ctx, text)
	}
	mmEncodeText.t.Fatalf("Unexpected call to EncodeServiceMock.EncodeText. %v %v", ctx, text)
	return
}

// EncodeTextAfterCounter returns a count of finished EncodeServiceMock.EncodeText invocations
func (mmEncodeText *EncodeServiceMock) EncodeTextAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEncodeText.afterEncodeTextCounter)
}

// EncodeTextBeforeCounter returns a count of EncodeServiceMock.EncodeText invocations
func (mmEncodeText *EncodeServiceMock) EncodeTextBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmEncodeText.beforeEncodeTextCounter)
}

// Calls returns a list of arguments used in each call to EncodeServiceMock.EncodeText.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmEncodeText *mEncodeServiceMockEncodeText) Calls() []*EncodeServiceMockEncodeTextParams {
	mmEncodeText.mutex.RLock()

	argCopy := make([]*EncodeServiceMockEncodeTextParams, len(mmEncodeText.callArgs))
	copy(argCopy, mmEncodeText.callArgs)

	mmEncodeText.mutex.RUnlock()

	return argCopy
}

// MinimockEncodeTextDone returns true if the count of the EncodeText invocations corresponds
// the number of defined expectations
func (m *EncodeServiceMock) MinimockEncodeTextDone() bool {
	if m.EncodeTextMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.EncodeTextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.EncodeTextMock.invocationsDone()
}

// MinimockEncodeTextInspect logs each unmet expectation
func (m *EncodeServiceMock) MinimockEncodeTextInspect() {
	for _, e := range m.EncodeTextMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to EncodeServiceMock.EncodeText at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterEncodeTextCounter := mm_atomic.LoadUint64(&m.afterEncodeTextCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.EncodeTextMock.defaultExpectation != nil && afterEncodeTextCounter < 1 {
		if m.EncodeTextMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to EncodeServiceMock.EncodeText at\n%s", m.EncodeTextMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to EncodeServiceMock.EncodeText at\n%s with params: %#v", m.EncodeTextMock.defaultExpectation.expectationOrigins.origin, *m.EncodeTextMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcEncodeText != nil && afterEncodeTextCounter < 1 {
		m.t.Errorf("Expected call to EncodeServiceMock.EncodeText at\n%s", m.funcEncodeTextOrigin)
	}

	if !m.EncodeTextMock.invocationsDone() && afterEncodeTextCounter > 0 {
		m.t.Errorf("Expected %d calls to EncodeServiceMock.EncodeText at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.EncodeTextMock.expectedInvocations), m.EncodeTextMock.expectedInvocationsOrigin, afterEncodeTextCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *EncodeServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockEncodeTextInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *EncodeServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *EncodeServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockEncodeTextDone()
}
